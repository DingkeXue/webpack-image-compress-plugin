const Https=require("https"),Url=require("url"),Chalk=require("chalk"),Ora=require("ora"),{DefaultHeader}=require("../utils/header"),{IMG_TEST}=require("../utils/regexp"),{ByteSize}=require("trample/node"),{RawSource}=require("webpack-sources"),pluginName="ImgCompressPlugin";module.exports=class{constructor(e){this._options=Object.assign({quality:.92,log:!0,compress:!0},e)}apply(e){e.hooks?!e.webpack&&void 0!==e.resolvers?e.hooks.emit.tapPromise(pluginName,e=>Promise.resolve(this.handleImgAssets(e))):e.hooks.compilation.tap(pluginName,e=>{e.hooks.processAssets.tapPromise(pluginName,()=>Promise.resolve(this.handleImgAssets(e)))}):e.plugin?e.plugin("emit",e=>{this.handleImgAssets(e)}):console.log("The webpack version number supported by img-compress-plugin is 3-5！, install: https://webpack.js.org/")}handleImgAssets(e){const s=e.assets,r=Object.keys(e.assets).filter(e=>IMG_TEST.test(e));if(!r.length)return Promise.resolve();e=r.map(e=>this.compressImg(s,e));const t=Ora("Start compressing......").start();return Promise.all(e).then(e=>{t.stop(),this._options.log&&e&&e.forEach(e=>console.log(e))})}async compressImg(e,s){try{var r=e[s].source(),t=await this.uploadImg(r),o=await this.downloadImg(t.output.url);e[s]=new RawSource(Buffer.alloc(o.length,o,"binary"));var i=Chalk.red(ByteSize(t.input.size)),a=Chalk.green(ByteSize(t.output.size)),l=`Compressed ${[Chalk.yellowBright(s)]} completed! Old Size: ${i}, New Size: ${a}`;return Promise.resolve(l)}catch(e){s=`Compressed [${Chalk.yellowBright(s)}] failed! ${Chalk.red(e)}`;return Promise.resolve(s)}}uploadImg(t){const o=DefaultHeader();return new Promise((s,r)=>{const e=Https.request(o,e=>e.on("data",e=>{e=JSON.parse(e.toString());e.error?r(e.message):s(e)}));e.write(t,"binary"),e.on("error",e=>r(e)),e.end()})}downloadImg(e){const t=new Url.URL(e);return new Promise((r,s)=>{const e=Https.request(t,e=>{let s="";e.setEncoding("binary"),e.on("data",e=>s+=e),e.on("end",()=>r(s))});e.on("error",e=>s(e)),e.end()})}};